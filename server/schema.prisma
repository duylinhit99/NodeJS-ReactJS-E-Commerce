generator client {
    provider = "prisma-client-js"
    output = "./src/generated/client"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id      Int  @id @default(autoincrement())
    username    String @unique
    password    String
    email       String @unique
    phone       String
    address     String 
    avatar      String

    Cart Cart[]

    Order Order[]
}

model Product {
    id      Int @id @default(autoincrement())
    title   String
    color   String
    rate    Float
    image   String
    price   Decimal @db.Decimal(10,3)
    description String
    categoryId Int

    category Category @relation(fields: [categoryId], references: [id])

    CartItem CartItem[]

    OrderItem OrderItem[]
}

model Category {
    id Int @id @default(autoincrement())
    name String @db.VarChar(100)
    products Product[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  total     Decimal   @db.Decimal(10,3)
  status    String    @default("PENDING")
  items     OrderItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Payment Payment[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10,3)
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  amount    Decimal  @db.Decimal(10,3)
  status    String   @default("PENDING")
  method    String   // 'Credit Card', 'PayPal', v.v.
  createdAt DateTime @default(now())
}


model Blog {
    id Int @id @default(autoincrement())
    title String
    image String
    desciption String
    content String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}